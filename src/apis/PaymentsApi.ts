/* tslint:disable */
/* eslint-disable */
/**
 * Cart Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CartListPaymentMethodsRequest,
  CartListPaymentMethodsResponse,
  CartSetPaymentsRequest,
  CartSetPaymentsResponse,
  RpcStatus,
} from '../models/index';
import {
    CartListPaymentMethodsRequestFromJSON,
    CartListPaymentMethodsRequestToJSON,
    CartListPaymentMethodsResponseFromJSON,
    CartListPaymentMethodsResponseToJSON,
    CartSetPaymentsRequestFromJSON,
    CartSetPaymentsRequestToJSON,
    CartSetPaymentsResponseFromJSON,
    CartSetPaymentsResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface ListPaymentMethodsRequest {
    body: CartListPaymentMethodsRequest;
}

export interface SetSetPaymentsRequest {
    body: CartSetPaymentsRequest;
}

/**
 * 
 */
export class PaymentsApi extends runtime.BaseAPI {

    /**
     * List payment methods
     * List Payment Methods
     */
    async listPaymentMethodsRaw(requestParameters: ListPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartListPaymentMethodsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listPaymentMethods.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/ListPaymentMethods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartListPaymentMethodsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartListPaymentMethodsResponseFromJSON(jsonValue));
    }

    /**
     * List payment methods
     * List Payment Methods
     */
    async listPaymentMethods(requestParameters: ListPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartListPaymentMethodsResponse> {
        const response = await this.listPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set SetPayments
     * Set SetPayments
     */
    async setSetPaymentsRaw(requestParameters: SetSetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartSetPaymentsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setSetPayments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/SetPayments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartSetPaymentsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartSetPaymentsResponseFromJSON(jsonValue));
    }

    /**
     * Set SetPayments
     * Set SetPayments
     */
    async setSetPayments(requestParameters: SetSetPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartSetPaymentsResponse> {
        const response = await this.setSetPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
