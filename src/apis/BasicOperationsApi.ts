/* tslint:disable */
/* eslint-disable */
/**
 * Cart Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CartAddProductsRequest,
  CartAddProductsResponse,
  CartCreateCartRequest,
  CartCreateCartResponse,
  CartGetActiveCartByCustomerRequest,
  CartGetActiveCartByCustomerResponse,
  CartGetCartRequest,
  CartGetCartResponse,
  CartListCartsRequest,
  CartListCartsResponse,
  CartMergeCartsRequest,
  CartMergeCartsResponse,
  CartRemoveProductsRequest,
  CartSetAdditionalInfoRequest,
  CartSetNotesRequest,
  CartTriggerRealignmentRequest,
  CartTriggerRealignmentResponse,
  CartUpdateCartRequest,
  CartUpdateProductsRequest,
  RpcStatus,
} from '../models/index';
import {
    CartAddProductsRequestFromJSON,
    CartAddProductsRequestToJSON,
    CartAddProductsResponseFromJSON,
    CartAddProductsResponseToJSON,
    CartCreateCartRequestFromJSON,
    CartCreateCartRequestToJSON,
    CartCreateCartResponseFromJSON,
    CartCreateCartResponseToJSON,
    CartGetActiveCartByCustomerRequestFromJSON,
    CartGetActiveCartByCustomerRequestToJSON,
    CartGetActiveCartByCustomerResponseFromJSON,
    CartGetActiveCartByCustomerResponseToJSON,
    CartGetCartRequestFromJSON,
    CartGetCartRequestToJSON,
    CartGetCartResponseFromJSON,
    CartGetCartResponseToJSON,
    CartListCartsRequestFromJSON,
    CartListCartsRequestToJSON,
    CartListCartsResponseFromJSON,
    CartListCartsResponseToJSON,
    CartMergeCartsRequestFromJSON,
    CartMergeCartsRequestToJSON,
    CartMergeCartsResponseFromJSON,
    CartMergeCartsResponseToJSON,
    CartRemoveProductsRequestFromJSON,
    CartRemoveProductsRequestToJSON,
    CartSetAdditionalInfoRequestFromJSON,
    CartSetAdditionalInfoRequestToJSON,
    CartSetNotesRequestFromJSON,
    CartSetNotesRequestToJSON,
    CartTriggerRealignmentRequestFromJSON,
    CartTriggerRealignmentRequestToJSON,
    CartTriggerRealignmentResponseFromJSON,
    CartTriggerRealignmentResponseToJSON,
    CartUpdateCartRequestFromJSON,
    CartUpdateCartRequestToJSON,
    CartUpdateProductsRequestFromJSON,
    CartUpdateProductsRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface AddProductsRequest {
    body: CartAddProductsRequest;
}

export interface CreateCartRequest {
    body: CartCreateCartRequest;
}

export interface GetActiveCartByCustomerRequest {
    body: CartGetActiveCartByCustomerRequest;
}

export interface GetCartRequest {
    body: CartGetCartRequest;
}

export interface ListCartsRequest {
    body: CartListCartsRequest;
}

export interface MergeCartsRequest {
    body: CartMergeCartsRequest;
}

export interface RemoveProductsRequest {
    body: CartRemoveProductsRequest;
}

export interface SetAdditionalInfoRequest {
    body: CartSetAdditionalInfoRequest;
}

export interface SetNotesRequest {
    body: CartSetNotesRequest;
}

export interface TriggerRealignmentRequest {
    body: CartTriggerRealignmentRequest;
}

export interface UpdateCartRequest {
    body: CartUpdateCartRequest;
}

export interface UpdateProductsRequest {
    body: CartUpdateProductsRequest;
}

/**
 * 
 */
export class BasicOperationsApi extends runtime.BaseAPI {

    /**
     * This endpoint allows you to add products to a shopping cart. The AddProducts method enables you to specify the tenantId and cartId to identify the target shopping cart, and provide a list of items to be added.
     * Add Products
     */
    async addProductsRaw(requestParameters: AddProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartAddProductsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addProducts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/AddProducts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartAddProductsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartAddProductsResponseFromJSON(jsonValue));
    }

    /**
     * This endpoint allows you to add products to a shopping cart. The AddProducts method enables you to specify the tenantId and cartId to identify the target shopping cart, and provide a list of items to be added.
     * Add Products
     */
    async addProducts(requestParameters: AddProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartAddProductsResponse> {
        const response = await this.addProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The CreateCart endpoint allows users to create a new cart for their shopping session. By making a request to this endpoint, users can initiate a new cart and obtain a unique identifier for future cart operations. This endpoint enables seamless cart management and provides a foundation for adding products and performing checkout operations.
     * Create Cart
     */
    async createCartRaw(requestParameters: CreateCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartCreateCartResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/CreateCart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartCreateCartRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartCreateCartResponseFromJSON(jsonValue));
    }

    /**
     * The CreateCart endpoint allows users to create a new cart for their shopping session. By making a request to this endpoint, users can initiate a new cart and obtain a unique identifier for future cart operations. This endpoint enables seamless cart management and provides a foundation for adding products and performing checkout operations.
     * Create Cart
     */
    async createCart(requestParameters: CreateCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartCreateCartResponse> {
        const response = await this.createCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the active cart by customer
     * Get Active Cart By Customer
     */
    async getActiveCartByCustomerRaw(requestParameters: GetActiveCartByCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartGetActiveCartByCustomerResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getActiveCartByCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/GetActiveCartByCustomer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartGetActiveCartByCustomerRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartGetActiveCartByCustomerResponseFromJSON(jsonValue));
    }

    /**
     * Get the active cart by customer
     * Get Active Cart By Customer
     */
    async getActiveCartByCustomer(requestParameters: GetActiveCartByCustomerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartGetActiveCartByCustomerResponse> {
        const response = await this.getActiveCartByCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the cart
     * Get Cart
     */
    async getCartRaw(requestParameters: GetCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartGetCartResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/GetCart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartGetCartRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartGetCartResponseFromJSON(jsonValue));
    }

    /**
     * Get the cart
     * Get Cart
     */
    async getCart(requestParameters: GetCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartGetCartResponse> {
        const response = await this.getCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all carts
     * List Carts
     */
    async listCartsRaw(requestParameters: ListCartsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartListCartsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listCarts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/ListCarts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartListCartsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartListCartsResponseFromJSON(jsonValue));
    }

    /**
     * List all carts
     * List Carts
     */
    async listCarts(requestParameters: ListCartsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartListCartsResponse> {
        const response = await this.listCartsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Merge carts
     * Merge Carts
     */
    async mergeCartsRaw(requestParameters: MergeCartsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartMergeCartsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling mergeCarts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/MergeCarts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartMergeCartsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartMergeCartsResponseFromJSON(jsonValue));
    }

    /**
     * Merge carts
     * Merge Carts
     */
    async mergeCarts(requestParameters: MergeCartsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartMergeCartsResponse> {
        const response = await this.mergeCartsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove products from the cart
     * Remove Products
     */
    async removeProductsRaw(requestParameters: RemoveProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling removeProducts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/RemoveProducts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartRemoveProductsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove products from the cart
     * Remove Products
     */
    async removeProducts(requestParameters: RemoveProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.removeProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set additional info
     * Set Additional Info
     */
    async setAdditionalInfoRaw(requestParameters: SetAdditionalInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setAdditionalInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/SetAdditionalInfo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartSetAdditionalInfoRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set additional info
     * Set Additional Info
     */
    async setAdditionalInfo(requestParameters: SetAdditionalInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setAdditionalInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set notes
     * Set Notes
     */
    async setNotesRaw(requestParameters: SetNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setNotes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/SetNotes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartSetNotesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set notes
     * Set Notes
     */
    async setNotes(requestParameters: SetNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger realignment
     * Trigger Realignment
     */
    async triggerRealignmentRaw(requestParameters: TriggerRealignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartTriggerRealignmentResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling triggerRealignment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/TriggerRealignment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartTriggerRealignmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartTriggerRealignmentResponseFromJSON(jsonValue));
    }

    /**
     * Trigger realignment
     * Trigger Realignment
     */
    async triggerRealignment(requestParameters: TriggerRealignmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartTriggerRealignmentResponse> {
        const response = await this.triggerRealignmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the cart
     * Update Cart
     */
    async updateCartRaw(requestParameters: UpdateCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/UpdateCart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartUpdateCartRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update the cart
     * Update Cart
     */
    async updateCart(requestParameters: UpdateCartRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update products in the cart
     * Update Products
     */
    async updateProductsRaw(requestParameters: UpdateProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateProducts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/UpdateProducts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartUpdateProductsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Update products in the cart
     * Update Products
     */
    async updateProducts(requestParameters: UpdateProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
