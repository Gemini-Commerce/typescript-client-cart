/* tslint:disable */
/* eslint-disable */
/**
 * Cart Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CartSetBillingAddressRequest,
  CartSetShipmentAddressRequest,
  RpcStatus,
} from '../models/index';
import {
    CartSetBillingAddressRequestFromJSON,
    CartSetBillingAddressRequestToJSON,
    CartSetShipmentAddressRequestFromJSON,
    CartSetShipmentAddressRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface SetBillingAddressRequest {
    body: CartSetBillingAddressRequest;
}

export interface SetShipmentAddressRequest {
    body: CartSetShipmentAddressRequest;
}

/**
 * 
 */
export class AddressesApi extends runtime.BaseAPI {

    /**
     * Set billing address
     * Set Billing Address
     */
    async setBillingAddressRaw(requestParameters: SetBillingAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setBillingAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/SetBillingAddress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartSetBillingAddressRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set billing address
     * Set Billing Address
     */
    async setBillingAddress(requestParameters: SetBillingAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setBillingAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set shipment address
     * Set Shipment Address
     */
    async setShipmentAddressRaw(requestParameters: SetShipmentAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setShipmentAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/SetShipmentAddress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartSetShipmentAddressRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set shipment address
     * Set Shipment Address
     */
    async setShipmentAddress(requestParameters: SetShipmentAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setShipmentAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
