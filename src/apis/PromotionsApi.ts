/* tslint:disable */
/* eslint-disable */
/**
 * Cart Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CartApplyCouponsRequest,
  CartRemoveCouponsRequest,
  RpcStatus,
} from '../models/index';
import {
    CartApplyCouponsRequestFromJSON,
    CartApplyCouponsRequestToJSON,
    CartRemoveCouponsRequestFromJSON,
    CartRemoveCouponsRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface ApplyCouponsRequest {
    body: CartApplyCouponsRequest;
}

export interface RemoveCouponsRequest {
    body: CartRemoveCouponsRequest;
}

/**
 * 
 */
export class PromotionsApi extends runtime.BaseAPI {

    /**
     * Apply coupons to the cart
     * Apply Coupons
     */
    async applyCouponsRaw(requestParameters: ApplyCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling applyCoupons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/ApplyCoupons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartApplyCouponsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Apply coupons to the cart
     * Apply Coupons
     */
    async applyCoupons(requestParameters: ApplyCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.applyCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove coupons from the cart
     * Remove Coupons
     */
    async removeCouponsRaw(requestParameters: RemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling removeCoupons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/RemoveCoupons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartRemoveCouponsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Remove coupons from the cart
     * Remove Coupons
     */
    async removeCoupons(requestParameters: RemoveCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.removeCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
