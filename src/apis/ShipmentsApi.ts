/* tslint:disable */
/* eslint-disable */
/**
 * Cart Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CartListShipmentMethodsRequest,
  CartListShipmentMethodsResponse,
  CartSetShipmentsRequest,
  RpcStatus,
} from '../models/index';
import {
    CartListShipmentMethodsRequestFromJSON,
    CartListShipmentMethodsRequestToJSON,
    CartListShipmentMethodsResponseFromJSON,
    CartListShipmentMethodsResponseToJSON,
    CartSetShipmentsRequestFromJSON,
    CartSetShipmentsRequestToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface ListShipmentMethodsRequest {
    body: CartListShipmentMethodsRequest;
}

export interface SetShipmentsRequest {
    body: CartSetShipmentsRequest;
}

/**
 * 
 */
export class ShipmentsApi extends runtime.BaseAPI {

    /**
     * List shipment methods
     * List Shipment Methods
     */
    async listShipmentMethodsRaw(requestParameters: ListShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CartListShipmentMethodsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listShipmentMethods.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/ListShipmentMethods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartListShipmentMethodsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartListShipmentMethodsResponseFromJSON(jsonValue));
    }

    /**
     * List shipment methods
     * List Shipment Methods
     */
    async listShipmentMethods(requestParameters: ListShipmentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CartListShipmentMethodsResponse> {
        const response = await this.listShipmentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set shipments
     * Set Shipments
     */
    async setShipmentsRaw(requestParameters: SetShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setShipments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/cart.Cart/SetShipments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartSetShipmentsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set shipments
     * Set Shipments
     */
    async setShipments(requestParameters: SetShipmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
